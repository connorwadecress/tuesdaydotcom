@page "/"
@rendermode InteractiveServer
@using Blazor.ProjectTracker.Components.SharedComponents
@using global::ProjectTracker.Domain.Entities
@inject NavigationManager Navigation

<MudContainer MaxWidth="MaxWidth.Large" Class="mt-6">
    <!-- Header -->
    <MudGrid Class="mb-4" AlignItems="Center">
        <MudItem xs="12" sm="6">
            <MudText Typo="Typo.h4">My Projects</MudText>
        </MudItem>
        <MudItem xs="12" sm="6" Class="d-flex justify-end">
            <MudButton Variant="Variant.Filled" Color="Color.Primary" OnClick="AddProject" StartIcon="@Icons.Material.Filled.Add">
                Add Project
            </MudButton>
        </MudItem>
    </MudGrid>

    <MudPaper Elevation="1" Class="p-4 mb-4">
        <MudGrid Spacing="2">
            <!-- Filter: Name -->
            <MudItem xs="12" sm="6" md="3">
                <MudTextField T="string"
                              @bind-Value="NameFilter"
                              @bind-Value:event="oninput"
                              Label="Search by name"
                              Adornment="Adornment.Start"
                              AdornmentIcon="@Icons.Material.Filled.Search"
                              Variant="Variant.Outlined"
                              Margin="Margin.Dense" />

            </MudItem>

            <!-- Filter: Status -->
            <MudItem xs="12" sm="6" md="3">
                <MudSelect T="string"
                           @bind-Value="StatusFilter"
                           Label="Status"
                           Variant="Variant.Outlined"
                           Dense="true"
                           Margin="Margin.Dense">
                    <MudSelectItem Value="@("")">All</MudSelectItem>
                    @foreach (var status in StatusOptions)
                    {
                        <MudSelectItem Value="@status">@status</MudSelectItem>
                    }
                </MudSelect>

            </MudItem>

            <!-- Filter: Tag -->
            <MudItem xs="12" sm="6" md="3">
                <MudSelect T="string"
                           @bind-Value="TagFilter"
                           Label="Tag"
                           Variant="Variant.Outlined"
                           Dense="true"
                           Margin="Margin.Dense">
                    <MudSelectItem Value="@("")">All</MudSelectItem>
                    @foreach (var tag in TagOptions)
                    {
                        <MudSelectItem Value="@tag">@tag</MudSelectItem>
                    }
                </MudSelect>
            </MudItem>

            <!-- Filter: Date -->
            <MudItem xs="12" sm="6" md="3">
                <MudDatePicker @bind-Date="DateFilter"
                               Label="Created On"
                               Variant="Variant.Outlined"
                               Margin="Margin.Dense"
                               Clearable="true"
                               DateFormat="yyyy-MM-dd"/>
            </MudItem>

            <!-- Clear & Count -->
            <MudItem xs="12" Class="d-flex justify-between align-items-center mt-2">
                <MudButton Variant="Variant.Text"
                           Color="Color.Primary"
                           StartIcon="@Icons.Material.Filled.Clear"
                           OnClick="ClearFilters">
                    Clear Filters
                </MudButton>
                <MudText Typo="Typo.caption" Color="Color.Secondary">
                    Showing <strong>@FilteredProjects.Count()</strong> / @Projects.Count project(s)
                </MudText>
            </MudItem>
        </MudGrid>
    </MudPaper>


    <!-- Project Cards -->
    @if (FilteredProjects.Any())
    {
        @foreach (var project in FilteredProjects)
        {
            <RowComponent Title="@project.Name"
                          Tags="@project.Tags.ToList()"
                          Status="@project.Status"
                          Date="@project.DateCreated"
                          OnClick="() => OnRowClicked(project)" />
        }
    }
    else
    {
        <MudText Typo="Typo.subtitle1" Color="Color.Secondary">No projects match the selected filters.</MudText>
    }
</MudContainer>

@code {
    private List<Project> Projects = new();

    // Filters
    private string? _nameFilter;
    private string? NameFilter
    {
        get => _nameFilter;
        set
        {
            _nameFilter = value;
            StateHasChanged();
        }
    }

    private string? _statusFilter;
    private string? StatusFilter
    {
        get => _statusFilter;
        set
        {
            _statusFilter = value;
            StateHasChanged();
        }
    }

    private string? _tagFilter;
    private string? TagFilter
    {
        get => _tagFilter;
        set
        {
            _tagFilter = value;
            StateHasChanged();
        }
    }

    private DateTime? _dateFilter;
    private DateTime? DateFilter
    {
        get => _dateFilter;
        set
        {
            _dateFilter = value;
            StateHasChanged();
        }
    }


    // Filtered results
    private IEnumerable<Project> FilteredProjects => Projects
        .Where(p => string.IsNullOrWhiteSpace(NameFilter) || p.Name.Contains(NameFilter, StringComparison.OrdinalIgnoreCase))
        .Where(p => string.IsNullOrWhiteSpace(StatusFilter) || p.Status == StatusFilter)
        .Where(p => string.IsNullOrWhiteSpace(TagFilter) || p.Tags.Any(t => t.Name == TagFilter))
        .Where(p => !DateFilter.HasValue || p.DateCreated.Date == DateFilter.Value.Date);

    // Dropdown options
    private IEnumerable<string> StatusOptions => Projects
        .Select(p => p.Status)
        .Where(s => !string.IsNullOrWhiteSpace(s))
        .Distinct()
        .OrderBy(s => s);

    private IEnumerable<string> TagOptions => Projects
        .SelectMany(p => p.Tags)
        .Where(t => !string.IsNullOrWhiteSpace(t.Name))
        .Select(t => t.Name)
        .Distinct()
        .OrderBy(t => t);

    protected override void OnInitialized()
    {
        var iotTag = new Tag { Name = "IoT", Color = 0x2ecc71 };
        var piTag = new Tag { Name = "Raspberry Pi", Color = 0x3498db };
        var csharpTag = new Tag { Name = "C#", Color = 0xe67e22, IsFontBlack = true };
        var reactTag = new Tag { Name = "React", Color = 0x61dafb, IsFontBlack = true };
        var azureTag = new Tag { Name = "Azure", Color = 0x0078d4, IsFontBlack = true };
        var mlTag = new Tag { Name = "ML", Color = 0x9b59b6 };
        var flutterTag = new Tag { Name = "Flutter", Color = 0x42a5f5, IsFontBlack = true };
        var postgresTag = new Tag { Name = "PostgreSQL", Color = 0x336791 };
        var dockerTag = new Tag { Name = "Docker", Color = 0x0db7ed, IsFontBlack = true };
        var rustTag = new Tag { Name = "Rust", Color = 0xde8615, IsFontBlack = true };

        Projects = new()
        {
            new() { Id = 1, Name = "Smart Home Controller", DateCreated = new(2024, 6, 10), Status = "Completed", Tags = new List<Tag> { iotTag, piTag, csharpTag } },
            new() { Id = 2, Name = "Real-time Stock Dashboard", DateCreated = new(2024, 7, 2), Status = "In Progress", Tags = new List<Tag> { reactTag, azureTag } },
            new() { Id = 3, Name = "Image Classifier API", DateCreated = new(2024, 8, 15), Status = "Paused", Tags = new List<Tag> { mlTag, dockerTag, csharpTag } },
            new() { Id = 4, Name = "Personal Budget Tracker", DateCreated = new(2024, 9, 9), Status = "Completed", Tags = new List<Tag> { flutterTag, postgresTag } },
            new() { Id = 5, Name = "IoT Garden Monitor", DateCreated = new(2024, 10, 21), Status = "In Progress", Tags = new List<Tag> { iotTag, piTag, rustTag } },
            new() { Id = 6, Name = "Chatbot Customer Support", DateCreated = new(2024, 11, 30), Status = "Planning", Tags = new List<Tag> { mlTag, azureTag, reactTag } },
            new() { Id = 7, Name = "Fitness Habit Tracker", DateCreated = new(2025, 1, 5), Status = "In Review", Tags = new List<Tag> { flutterTag, postgresTag } },
            new() { Id = 8, Name = "Serverless Notes App", DateCreated = new(2025, 2, 17), Status = "In Progress", Tags = new List<Tag> { azureTag, reactTag } },
            new() { Id = 9, Name = "Containerized Dev Env Setup", DateCreated = new(2025, 3, 8), Status = "Completed", Tags = new List<Tag> { dockerTag, rustTag } },
            new() { Id = 10, Name = "Real-time Language Translator", DateCreated = new(2025, 4, 12), Status = "Planning", Tags = new List<Tag> { mlTag, csharpTag, azureTag } },
        };
    }

    private void ClearFilters()
    {
        NameFilter = null;
        StatusFilter = null;
        TagFilter = null;
        DateFilter = null;
    }

    private void OnRowClicked(Project p)
    {
        Navigation.NavigateTo($"/project/{p.Id}");
    }

    private void Refresh() => StateHasChanged();


    private void AddProject() { /* Future implementation */ }
}
}
