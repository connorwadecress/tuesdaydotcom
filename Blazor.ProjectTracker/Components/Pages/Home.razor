@page "/"
@rendermode InteractiveServer
@using Blazor.ProjectTracker.Components.SharedComponents
@using global::ProjectTracker.Application.Services
@using global::ProjectTracker.Domain.Entities
@using global::ProjectTracker.Application.Interfaces
@inject NavigationManager Navigation
@inject IProjectService ProjectService;
using System.Linq;


<style>
    .table-dark { width: 100% !important; }
    .tag-pill   { display:inline-block;margin-right:4px;padding:2px 6px;border-radius:4px;font-size:.85em;white-space:nowrap;}

    .project-row          { cursor:pointer;transition:background-color .2s ease-in-out;border-bottom:1px solid #444; }
    .project-row td       { padding:1rem .75rem;vertical-align:middle; }
    .project-row:hover    { background-color:#2a2a2a; }
    .project-row:not(:last-child){ box-shadow:inset 0 -1px 0 rgba(255,255,255,.05); }

    .filter-input { max-width:180px; }
</style>

<div style="background:#1a1a1a;color:#fff;min-height:100vh;padding:2rem;">
    <div class="d-flex align-items-center mb-4">
        <h1 class="display-4 m-0">My Projects</h1>
        <MudButton Variant="Variant.Outlined" Color="Color.Primary" Class="ms-auto"
                   Style="width:38px;height:38px;font-size:1.5rem;line-height:1;"
                   Title="Add project" OnClick="AddProject">+</MudButton>
    </div>

    <!---- Filter bar -->
    <div class="d-flex flex-wrap gap-2 mb-3">
        <input class="form-control filter-input" placeholder="Filter by name"
               @bind="NameFilter" @bind:after="Refresh" />
        <select class="form-select filter-input" @bind="StatusFilter" @bind:after="Refresh">
            <option value="">All statuses</option>
            @foreach (var status in StatusOptions) { <option>@status</option> }
        </select>
        <select class="form-select filter-input" @bind="TagFilter" @bind:after="Refresh">
            <option value="">All tags</option>
            @foreach (var tagName in TagOptions) { <option>@tagName</option> }
        </select>
        <input type="date" class="form-control filter-input"
               @bind="DateFilter" @bind:after="Refresh" />
        <button class="btn btn-sm btn-outline-light" @onclick="ClearFilters">Clear</button>

        <span class="ms-auto align-self-center text-secondary">
            Showing @ViewData.Count() / @Projects.Count projects
        </span>
    </div>

    <table class="table table-dark table-striped w-100">
        <thead>
            <tr>
                <th style="width:30%;">Project Name</th>
                <th style="width:30%;">Tags</th>
                <th style="width:20%;">Status</th>
                <th style="width:20%;">Date Created</th>
            </tr>
        </thead>
        <tbody>
        @foreach (var p in ViewData)
        {
            <RowComponent Title="@p.Name"
                          Tags="@p.Tags.ToList()"
                          Status="@p.Status"
                          Date="@p.DateCreated"
                          OnClick="() => OnRowClicked(p)" />
        }
        </tbody>
    </table>
</div>

@code {
    /* ---------------- data ---------------- */
    private List<Project> Projects = new();

    /* ---------------- filters ---------------- */
    private string? NameFilter;
    private string? StatusFilter;
    private string? TagFilter;
    private DateTime? DateFilter;

    private IEnumerable<Project> ViewData => Projects.Where(p =>
        (string.IsNullOrWhiteSpace(NameFilter)   || p.Name.Contains(NameFilter, StringComparison.OrdinalIgnoreCase)) &&
        (string.IsNullOrWhiteSpace(StatusFilter) || p.Status == StatusFilter) &&
        (string.IsNullOrWhiteSpace(TagFilter)    || p.Tags.Any(t => t.Name == TagFilter)) &&
        (!DateFilter.HasValue                    || p.DateCreated.Date == DateFilter.Value.Date));

    private IEnumerable<string> StatusOptions => Projects.Select(p => p.Status).Distinct();
    private IEnumerable<string> TagOptions    => Projects.SelectMany(p => p.Tags).Select(t => t.Name).Distinct();

    protected override async Task OnInitializedAsync()
    {
        var projectsList = await ProjectService.GetAllAsync(default);
        Projects = projectsList.ToList();
    }

    /* ---------------- helpers ---------------- */
    private void Refresh() { /* no-op, binding triggers re-render */ }
    private void ClearFilters()
    {
        NameFilter = StatusFilter = TagFilter = null;
        DateFilter = null;
    }

    private void OnRowClicked(Project p) => Navigation.NavigateTo($"/project/{p.Id}");
    private void AddProject() { Navigation.NavigateTo("/create-project/"); }
}
