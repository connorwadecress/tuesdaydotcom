@page "/project/{ProjectId:int}"
@using global::ProjectTracker.Application.Interfaces
@using global::ProjectTracker.Application.Services
@using global::ProjectTracker.Domain.Entities
@inject IBoardService BoardService

<MudText Typo="Typo.h4">Boards for Project @ProjectId</MudText>

@foreach (var board in Boards)
{
    <MudText Typo="Typo.h6">@board.Name</MudText>
    <KanbanBoard Groups="@board.Groups" OnIssueMoved="HandleIssueMoved" />
}

@code {
    [Parameter] public int ProjectId { get; set; }
    public Project Project { get; set; }

    private List<Board> Boards { get; set; } = new();

    protected override async Task OnInitializedAsync()
    {
        var allBoards = await BoardService.GetAllAsync(default);
        Boards = allBoards.Where(x => x.ProjectID == ProjectId).ToList();
    }

    private Task HandleIssueMoved((Issue issue, Group newGroup) change)
    {
        // Persist the change (optional)
        return Task.CompletedTask;
    }
}
